<?xml version="1.0"?>
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/"
               xmlns:set="http://www.sitecore.net/xmlconfig/set/"
               xmlns:env="http://www.sitecore.net/xmlconfig/env/"
               xmlns:role="http://www.sitecore.net/xmlconfig/role/">
  <sitecore>
    <sites>
      <!--
        JSS Site Registration
        This configures the site with Sitecore - i.e. host headers, item paths.
        If your JSS app lives within an existing Sitecore site, this may not be necessary.
        
        *** This is managed by SXA configuration items within Sitecore so its not needed ***
      -->
      <site name="shell">
        <patch:attribute name="enableItemLanguageFallback">true</patch:attribute>
        <patch:attribute name="enableFieldLanguageFallback">false</patch:attribute>
      </site>
      <site name="website">
        <patch:attribute name="enableItemLanguageFallback">true</patch:attribute>
      </site>
    </sites>

    <javaScriptServices>
      <apps>
        <!--
          JSS App Registration
          The JSS app needs to be registered in order to support layout service and import services.

          There are many available attributes, and they inherit the defaults if not explicitly specified here.
          Defaults are defined in `/App_Config/Sitecore/JavaScriptServices/Sitecore.JavaScriptServices.Apps.config`

          NOTE: graphQLEndpoint enables _Integrated GraphQL_. If not using integrated GraphQL, it can be removed.

          NOTE: This app configuration assumes a Sitecore-first approach and thus disables the JSS Workflow for
          initial app import, and does not protect imported items.
        -->
        
        <!-- NOT NEEDED WITH SXA -->
        <!--<app env:require="Local"
             name="demosite"
             sitecorePath="/sitecore/content/DemoSite/DemoSiteWebsite"
             graphQLEndpoint="/sitecore/api/graph/edge"
             serverSideRenderingEngine="http"
             serverSideRenderingEngineEndpointUrl="$(env:RENDERING_HOST_ENDPOINT_URI)"
             serverSideRenderingEngineApplicationUrl="$(env:RENDERING_HOST_PUBLIC_URI)"
             useLanguageSpecificLayout="true"
             defaultWorkflow=""
             protectDeveloperItems="false"
             deploymentSecret="$(env:JSS_DemoSite_DEPLOYMENT_SECRET)"
             debugSecurity="false"
             layoutServiceConfiguration="default"
             dictionaryPath="$sitecorePath/Dictionary" 
             dictionaryDomain="Dictionary"
             inherits="defaults" />-->

        <app name="defaults" set:importDatabase="web" role:require="ContentDelivery" />
      </apps>
    </javaScriptServices>

    <!--
      Since this solution is designed for Sitecore-first JSS workflow, remove editor
      warnings regarding import overwrites.
    -->
    <pipelines>
      <group groupName="javaScriptServices">
        <pipelines>
          <item.getItemNotifications>
            <processor type="Sitecore.JavaScriptServices.AppServices.Pipelines.GetItemNotifications.IsItemAllowedForOverwrite, Sitecore.JavaScriptServices.AppServices">
              <patch:delete />
            </processor>
          </item.getItemNotifications>
        </pipelines>
      </group>
    </pipelines>

    <experienceAccelerator>
      <renderingVariants>
        <allowedTemplates>
          <template name="DemoSite Headless Partial Design">{0BAD4011-BEEA-4158-9E2D-4A4BEB7A73E6}</template>
          <template name="DemoSite Headless Page Design">{52A68D73-7C95-43C1-8594-40BB1276413D}</template>
        </allowedTemplates>
      </renderingVariants>
    </experienceAccelerator>

    <!-- REDUCE THE GRAPHQL TEMPLATE GENERATION -->
    <api>
      <GraphQL>
        <!-- the defaults section contains config templates that can be reused elsewhere using 'ref' -->
        <defaults>
          <content>
            <schemaProviders>
              <!-- 
                                Edge schema provider. Provides the same response as Edge Delivery GraphQL endpoint
                                Usage: on your endpoint, change your content schema provider to '<content ref="/sitecore/GraphQL/defaults/content/edgeContent" param1="master" />'
                                (where param1 is the database you want to hook to)
                            -->
              <edgeContent type="Sitecore.Services.GraphQL.EdgeSchema.EdgeSchemaProvider, Sitecore.Services.GraphQL.EdgeSchema">
                <!-- 
                                    The template predicate defines which templates will have GraphQL types generated for them. This is NOT a security measure - all fields
                                    that the API key user/authenticated user can access can be queried by name - but can be used to limit the scope of your GraphQL schema.
                                -->
                <templates type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardTemplatePredicate, Sitecore.Services.GraphQL.Content">
                  <database>$(1)</database>
                  <paths hint="list:AddIncludedPath">
                    <foundation>
                      <patch:delete />
                    </foundation>
                    <feature>
                      <patch:delete />
                    </feature>
                    <project>
                      <patch:delete />
                    </project>
                    <userdefined>
                      <patch:delete />
                    </userdefined>
                    <DemoSiteFoundation>/sitecore/templates/Foundation/DemoSite</DemoSiteFoundation>
                    <DemoSiteFeature>/sitecore/templates/Feature/DemoSite</DemoSiteFeature>
                    <DemoSiteProject>/sitecore/templates/Project/DemoSite</DemoSiteProject>
                  </paths>
                </templates>
              </edgeContent>
            </schemaProviders>
          </content>
        </defaults>
      </GraphQL>
    </api>

    <!--  -->
    <layoutService>
      <configurations>
        <config name="sxa-jss">
          <requestContext type="Sitecore.LayoutService.Configuration.DefaultRequestContext, Sitecore.LayoutService">
            <databaseName role:require="ContentDelivery">web</databaseName>
          </requestContext>
        </config>
      </configurations>
    </layoutService>
  </sitecore>
</configuration>