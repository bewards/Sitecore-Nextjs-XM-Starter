import {
  Field,
  Image,
  ImageField,
  Item,
  LinkField,
  RichText,
  Text,
  getFieldValue,
  {{#if hasDatasource}}
  withDatasourceCheck,
  {{/if}}
} from '@sitecore-jss/sitecore-jss-nextjs';
import classNames from 'classnames/bind';
import React from 'react';

import Link from 'components/helpers/Link/Link';
import ResponsiveImages from 'components/helpers/ResponsiveImages';
import type { ComponentProps } from 'lib/component-props';
{{#if hasStyles}}
{{#if hasDatasource}}
import compose from 'lib/enhancers/compose';
{{/if}}
import withStyles from 'lib/enhancers/withStyles';
{{/if}}
{{#if hasRenderingParams}}
import { getRenderingParam } from 'lib/rendering-params';
{{/if}}
import type { RecordOfFields } from 'models/fields';
import type { ResponsiveImageFields } from 'models/responsive-image';

import styles from './{{pascalCase name}}.module.scss';

type {{pascalCase name}}Fields = ResponsiveImageFields & {
  sampleTitle: Field<string>;
  sampleBody: Field<string>;
  sampleLink: LinkField;
  sampleLinkText: Field<string>;
  sampleImage: ImageField;
  titleHeadingLevel: Item | null;
  titleTextStyle: Item | null;
};

type {{pascalCase name}}Props = ComponentProps & {
  fields: {{pascalCase name}}Fields;
};

const cx = classNames.bind(styles);

const {{pascalCase name}} = (props: {{pascalCase name}}Props): JSX.Element => {
  const { {{#if hasStyles}}className, {{/if}}fields{{#if hasRenderingParams}}, params{{/if}} } = props;

  {{#if hasRenderingParams}}
  const imageDirection = getRenderingParam(params.imageDirection);

  {{/if}}
  const titleHeadingLevelItemField = fields.titleHeadingLevel?.fields as RecordOfFields;
  const titleHeadingLevelValue = getFieldValue<string>(titleHeadingLevelItemField, 'Value') || 'h1';

  const titleTextStyleItemField = fields.titleTextStyle?.fields as RecordOfFields;
  const titleTextStyleValue = getFieldValue<string>(titleTextStyleItemField, 'Value') || 'coconut';

  return (
    <div className={cx('{{kebabCase name}}', 'component-container-edge'{{#if hasStyles}}, className{{/if}})}>
      <h1>Component Generated! Name: {{pascalCase name}}</h1>
      {{#if hasRenderingParams}}
      <p>
        Accessing Rendering Parameter <code>imageDirection</code>: {imageDirection}
      </p>
      {{/if}}
      <Image field={fields.sampleImage} />
      <ResponsiveImages
        desktopImage={fields.desktopImage}
        mobileImage={fields.mobileImage}
        tabletImage={fields.tabletImage}
      />
      <div>
        <Text
          className={cx({ title: true, [titleTextStyleValue]: true })}
          encode={typeof fields.sampleTitle.editable !== 'undefined'}
          field={fields.sampleTitle}
          tag={titleHeadingLevelValue}
          editable={true}
        />
        <RichText className={cx('body')} field={fields.sampleBody} tag="div" />
        {fields.sampleLink?.value.href !== '' && (
          <Link className={cx('link')} field={fields.sampleLink} showLinkTextWithChildrenPresent={false}>
            <Text field={fields.sampleLinkText} />
          </Link>
        )}
      </div>
    </div>
  );
};

{{#if hasDatasource}}
{{#if hasStyles}}
export default compose<{{pascalCase name}}Props>(withDatasourceCheck(), withStyles())({{pascalCase name}});
{{else}}
export default withDatasourceCheck()<{{pascalCase name}}Props>({{pascalCase name}});
{{/if}}
{{else}}
{{#if hasStyles}}
export default withStyles()<{{pascalCase name}}Props>({{pascalCase name}});
{{else}}
export default {{pascalCase name}};
{{/if}}
{{/if}}
